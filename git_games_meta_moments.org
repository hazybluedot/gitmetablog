* Meta Momements
I had a bit of a meta moment while swimming today. I have a lot of
good moments while swimming, probably because it's a chance for my
mind to wander.  That's probably a good argument to go more often than
I did this past week.  But I digress.

Yesterday I was introduced to a [[ http://pcottle.github.com/learnGitBranching/][game of sorts]] to help learn some
concepts used by [[http://git-scm.com/about][git]].  For those of you who don't know, git is a
versioning control system that has gained quit a bit of popularity
over the past few years, especially in the open source community.  I
had been using it myself for my own projects, but mainly at a very
simplistic level.

At one level, a versioning control system (VCS), of which git is
one of many, is a tool to facilitate documenting the changes
of... well, a document. Historically these systems were develped by
software designers to both document changes and provide an easy path
to revert to older versions of source code. Later, similar concepts
were implemented in modern word processors (with limited scope and
power due to the restrictive nature, essentially the traditional
method of tracking edits from the pen and paper days was ported over
to the electronic medium without much change). 

One thing that became much more clear to me after trying out the git
game was that while providing logical "snapshots" of a project that
can be used as a return point if somethign goes astray in the future,
git is creating a history of the project, a history that tells a
story. But unlike other histories you may be familiar with, the
history generated by git can be rewritten to change the past.

What had alluded me up until this point was what motivation one might
have to rewrite history.  I figured, you make changes, commit them to
the project, those changes get recorded, what more would you need?
Well, it turns out that with the ability to rewrite history, git makes
it incredibly easy to do certain types of edits on your data and
allows an author to use git more as a tool for trying out new,
possibly risky ideas, or take off on a tangent while always providing
a clear path back to a ground point.

The details of what these types of edits are are important, but after
I began writing them up I realized I was losing sight of my original
reason for writing this post!  Luckily, I have been using git to track
changes to this document, and created a branch for each of the
examples I thought would be useful.  I'm going to leave them out of
the final document for now, but they exist in my history, and since I
will post this project to github, you are free to take a look!

What I thought about while swimming, after the git game helped me
understand why rewriting history could be so useful, and how the
history itself could be used, was that since I'm using git to manage
the files for ECE2524, I could also use it guide future semesters of
the course. Every time I add a new set of lecture notes, or add a new
assignment, I make a commit to a git repo containing all the files
I've used so far.  That is also recording the order in which topics
are introduced to the class, so I'm generating an outline for the
semester just by nature of using git for your regular garden variety
versioning control.

But I had an hour and a half to occupy my brain while I swam back and
forth, so the wheels kept turning.  We use git for class, as those of
you in it know, because it is an important tool for software
development and happens to be a particularly Unix-y tool to boot.
